// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2025 22:40:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    datapath_debug
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module datapath_debug_vlg_sample_tst(
	clk,
	rst_n,
	sampler_tx
);
input  clk;
input  rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module datapath_debug_vlg_check_tst (
	aluResult,
	alu_op,
	branch,
	funct3,
	funct7,
	imAddr,
	instr,
	opcode,
	pc,
	rd1,
	rd2,
	sampler_rx
);
input [31:0] aluResult;
input [1:0] alu_op;
input  branch;
input [2:0] funct3;
input [6:0] funct7;
input [5:0] imAddr;
input [31:0] instr;
input [6:0] opcode;
input [31:0] pc;
input [31:0] rd1;
input [31:0] rd2;
input sampler_rx;

reg [31:0] aluResult_expected;
reg [1:0] alu_op_expected;
reg  branch_expected;
reg [2:0] funct3_expected;
reg [6:0] funct7_expected;
reg [5:0] imAddr_expected;
reg [31:0] instr_expected;
reg [6:0] opcode_expected;
reg [31:0] pc_expected;
reg [31:0] rd1_expected;
reg [31:0] rd2_expected;

reg [31:0] aluResult_prev;
reg [1:0] alu_op_prev;
reg  branch_prev;
reg [2:0] funct3_prev;
reg [6:0] funct7_prev;
reg [5:0] imAddr_prev;
reg [31:0] instr_prev;
reg [6:0] opcode_prev;
reg [31:0] pc_prev;
reg [31:0] rd1_prev;
reg [31:0] rd2_prev;

reg [31:0] aluResult_expected_prev;
reg [1:0] alu_op_expected_prev;
reg  branch_expected_prev;
reg [2:0] funct3_expected_prev;
reg [6:0] funct7_expected_prev;
reg [5:0] imAddr_expected_prev;
reg [31:0] instr_expected_prev;
reg [6:0] opcode_expected_prev;
reg [31:0] pc_expected_prev;
reg [31:0] rd1_expected_prev;
reg [31:0] rd2_expected_prev;

reg [31:0] last_aluResult_exp;
reg [1:0] last_alu_op_exp;
reg  last_branch_exp;
reg [2:0] last_funct3_exp;
reg [6:0] last_funct7_exp;
reg [5:0] last_imAddr_exp;
reg [31:0] last_instr_exp;
reg [6:0] last_opcode_exp;
reg [31:0] last_pc_exp;
reg [31:0] last_rd1_exp;
reg [31:0] last_rd2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluResult_prev = aluResult;
	alu_op_prev = alu_op;
	branch_prev = branch;
	funct3_prev = funct3;
	funct7_prev = funct7;
	imAddr_prev = imAddr;
	instr_prev = instr;
	opcode_prev = opcode;
	pc_prev = pc;
	rd1_prev = rd1;
	rd2_prev = rd2;
end

// update expected /o prevs

always @(trigger)
begin
	aluResult_expected_prev = aluResult_expected;
	alu_op_expected_prev = alu_op_expected;
	branch_expected_prev = branch_expected;
	funct3_expected_prev = funct3_expected;
	funct7_expected_prev = funct7_expected;
	imAddr_expected_prev = imAddr_expected;
	instr_expected_prev = instr_expected;
	opcode_expected_prev = opcode_expected;
	pc_expected_prev = pc_expected;
	rd1_expected_prev = rd1_expected;
	rd2_expected_prev = rd2_expected;
end


// expected aluResult[ 31 ]
initial
begin
	aluResult_expected[31] = 1'bX;
end 
// expected aluResult[ 30 ]
initial
begin
	aluResult_expected[30] = 1'bX;
end 
// expected aluResult[ 29 ]
initial
begin
	aluResult_expected[29] = 1'bX;
end 
// expected aluResult[ 28 ]
initial
begin
	aluResult_expected[28] = 1'bX;
end 
// expected aluResult[ 27 ]
initial
begin
	aluResult_expected[27] = 1'bX;
end 
// expected aluResult[ 26 ]
initial
begin
	aluResult_expected[26] = 1'bX;
end 
// expected aluResult[ 25 ]
initial
begin
	aluResult_expected[25] = 1'bX;
end 
// expected aluResult[ 24 ]
initial
begin
	aluResult_expected[24] = 1'bX;
end 
// expected aluResult[ 23 ]
initial
begin
	aluResult_expected[23] = 1'bX;
end 
// expected aluResult[ 22 ]
initial
begin
	aluResult_expected[22] = 1'bX;
end 
// expected aluResult[ 21 ]
initial
begin
	aluResult_expected[21] = 1'bX;
end 
// expected aluResult[ 20 ]
initial
begin
	aluResult_expected[20] = 1'bX;
end 
// expected aluResult[ 19 ]
initial
begin
	aluResult_expected[19] = 1'bX;
end 
// expected aluResult[ 18 ]
initial
begin
	aluResult_expected[18] = 1'bX;
end 
// expected aluResult[ 17 ]
initial
begin
	aluResult_expected[17] = 1'bX;
end 
// expected aluResult[ 16 ]
initial
begin
	aluResult_expected[16] = 1'bX;
end 
// expected aluResult[ 15 ]
initial
begin
	aluResult_expected[15] = 1'bX;
end 
// expected aluResult[ 14 ]
initial
begin
	aluResult_expected[14] = 1'bX;
end 
// expected aluResult[ 13 ]
initial
begin
	aluResult_expected[13] = 1'bX;
end 
// expected aluResult[ 12 ]
initial
begin
	aluResult_expected[12] = 1'bX;
end 
// expected aluResult[ 11 ]
initial
begin
	aluResult_expected[11] = 1'bX;
end 
// expected aluResult[ 10 ]
initial
begin
	aluResult_expected[10] = 1'bX;
end 
// expected aluResult[ 9 ]
initial
begin
	aluResult_expected[9] = 1'bX;
end 
// expected aluResult[ 8 ]
initial
begin
	aluResult_expected[8] = 1'bX;
end 
// expected aluResult[ 7 ]
initial
begin
	aluResult_expected[7] = 1'bX;
end 
// expected aluResult[ 6 ]
initial
begin
	aluResult_expected[6] = 1'bX;
end 
// expected aluResult[ 5 ]
initial
begin
	aluResult_expected[5] = 1'bX;
end 
// expected aluResult[ 4 ]
initial
begin
	aluResult_expected[4] = 1'bX;
end 
// expected aluResult[ 3 ]
initial
begin
	aluResult_expected[3] = 1'bX;
end 
// expected aluResult[ 2 ]
initial
begin
	aluResult_expected[2] = 1'bX;
end 
// expected aluResult[ 1 ]
initial
begin
	aluResult_expected[1] = 1'bX;
end 
// expected aluResult[ 0 ]
initial
begin
	aluResult_expected[0] = 1'bX;
end 
// expected alu_op[ 1 ]
initial
begin
	alu_op_expected[1] = 1'bX;
end 
// expected alu_op[ 0 ]
initial
begin
	alu_op_expected[0] = 1'bX;
end 
// expected funct3[ 2 ]
initial
begin
	funct3_expected[2] = 1'bX;
end 
// expected funct3[ 1 ]
initial
begin
	funct3_expected[1] = 1'bX;
end 
// expected funct3[ 0 ]
initial
begin
	funct3_expected[0] = 1'bX;
end 
// expected funct7[ 6 ]
initial
begin
	funct7_expected[6] = 1'bX;
end 
// expected funct7[ 5 ]
initial
begin
	funct7_expected[5] = 1'bX;
end 
// expected funct7[ 4 ]
initial
begin
	funct7_expected[4] = 1'bX;
end 
// expected funct7[ 3 ]
initial
begin
	funct7_expected[3] = 1'bX;
end 
// expected funct7[ 2 ]
initial
begin
	funct7_expected[2] = 1'bX;
end 
// expected funct7[ 1 ]
initial
begin
	funct7_expected[1] = 1'bX;
end 
// expected funct7[ 0 ]
initial
begin
	funct7_expected[0] = 1'bX;
end 
// expected instr[ 31 ]
initial
begin
	instr_expected[31] = 1'bX;
end 
// expected instr[ 30 ]
initial
begin
	instr_expected[30] = 1'bX;
end 
// expected instr[ 29 ]
initial
begin
	instr_expected[29] = 1'bX;
end 
// expected instr[ 28 ]
initial
begin
	instr_expected[28] = 1'bX;
end 
// expected instr[ 27 ]
initial
begin
	instr_expected[27] = 1'bX;
end 
// expected instr[ 26 ]
initial
begin
	instr_expected[26] = 1'bX;
end 
// expected instr[ 25 ]
initial
begin
	instr_expected[25] = 1'bX;
end 
// expected instr[ 24 ]
initial
begin
	instr_expected[24] = 1'bX;
end 
// expected instr[ 23 ]
initial
begin
	instr_expected[23] = 1'bX;
end 
// expected instr[ 22 ]
initial
begin
	instr_expected[22] = 1'bX;
end 
// expected instr[ 21 ]
initial
begin
	instr_expected[21] = 1'bX;
end 
// expected instr[ 20 ]
initial
begin
	instr_expected[20] = 1'bX;
end 
// expected instr[ 19 ]
initial
begin
	instr_expected[19] = 1'bX;
end 
// expected instr[ 18 ]
initial
begin
	instr_expected[18] = 1'bX;
end 
// expected instr[ 17 ]
initial
begin
	instr_expected[17] = 1'bX;
end 
// expected instr[ 16 ]
initial
begin
	instr_expected[16] = 1'bX;
end 
// expected instr[ 15 ]
initial
begin
	instr_expected[15] = 1'bX;
end 
// expected instr[ 14 ]
initial
begin
	instr_expected[14] = 1'bX;
end 
// expected instr[ 13 ]
initial
begin
	instr_expected[13] = 1'bX;
end 
// expected instr[ 12 ]
initial
begin
	instr_expected[12] = 1'bX;
end 
// expected instr[ 11 ]
initial
begin
	instr_expected[11] = 1'bX;
end 
// expected instr[ 10 ]
initial
begin
	instr_expected[10] = 1'bX;
end 
// expected instr[ 9 ]
initial
begin
	instr_expected[9] = 1'bX;
end 
// expected instr[ 8 ]
initial
begin
	instr_expected[8] = 1'bX;
end 
// expected instr[ 7 ]
initial
begin
	instr_expected[7] = 1'bX;
end 
// expected instr[ 6 ]
initial
begin
	instr_expected[6] = 1'bX;
end 
// expected instr[ 5 ]
initial
begin
	instr_expected[5] = 1'bX;
end 
// expected instr[ 4 ]
initial
begin
	instr_expected[4] = 1'bX;
end 
// expected instr[ 3 ]
initial
begin
	instr_expected[3] = 1'bX;
end 
// expected instr[ 2 ]
initial
begin
	instr_expected[2] = 1'bX;
end 
// expected instr[ 1 ]
initial
begin
	instr_expected[1] = 1'bX;
end 
// expected instr[ 0 ]
initial
begin
	instr_expected[0] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected rd1[ 31 ]
initial
begin
	rd1_expected[31] = 1'bX;
end 
// expected rd1[ 30 ]
initial
begin
	rd1_expected[30] = 1'bX;
end 
// expected rd1[ 29 ]
initial
begin
	rd1_expected[29] = 1'bX;
end 
// expected rd1[ 28 ]
initial
begin
	rd1_expected[28] = 1'bX;
end 
// expected rd1[ 27 ]
initial
begin
	rd1_expected[27] = 1'bX;
end 
// expected rd1[ 26 ]
initial
begin
	rd1_expected[26] = 1'bX;
end 
// expected rd1[ 25 ]
initial
begin
	rd1_expected[25] = 1'bX;
end 
// expected rd1[ 24 ]
initial
begin
	rd1_expected[24] = 1'bX;
end 
// expected rd1[ 23 ]
initial
begin
	rd1_expected[23] = 1'bX;
end 
// expected rd1[ 22 ]
initial
begin
	rd1_expected[22] = 1'bX;
end 
// expected rd1[ 21 ]
initial
begin
	rd1_expected[21] = 1'bX;
end 
// expected rd1[ 20 ]
initial
begin
	rd1_expected[20] = 1'bX;
end 
// expected rd1[ 19 ]
initial
begin
	rd1_expected[19] = 1'bX;
end 
// expected rd1[ 18 ]
initial
begin
	rd1_expected[18] = 1'bX;
end 
// expected rd1[ 17 ]
initial
begin
	rd1_expected[17] = 1'bX;
end 
// expected rd1[ 16 ]
initial
begin
	rd1_expected[16] = 1'bX;
end 
// expected rd1[ 15 ]
initial
begin
	rd1_expected[15] = 1'bX;
end 
// expected rd1[ 14 ]
initial
begin
	rd1_expected[14] = 1'bX;
end 
// expected rd1[ 13 ]
initial
begin
	rd1_expected[13] = 1'bX;
end 
// expected rd1[ 12 ]
initial
begin
	rd1_expected[12] = 1'bX;
end 
// expected rd1[ 11 ]
initial
begin
	rd1_expected[11] = 1'bX;
end 
// expected rd1[ 10 ]
initial
begin
	rd1_expected[10] = 1'bX;
end 
// expected rd1[ 9 ]
initial
begin
	rd1_expected[9] = 1'bX;
end 
// expected rd1[ 8 ]
initial
begin
	rd1_expected[8] = 1'bX;
end 
// expected rd1[ 7 ]
initial
begin
	rd1_expected[7] = 1'bX;
end 
// expected rd1[ 6 ]
initial
begin
	rd1_expected[6] = 1'bX;
end 
// expected rd1[ 5 ]
initial
begin
	rd1_expected[5] = 1'bX;
end 
// expected rd1[ 4 ]
initial
begin
	rd1_expected[4] = 1'bX;
end 
// expected rd1[ 3 ]
initial
begin
	rd1_expected[3] = 1'bX;
end 
// expected rd1[ 2 ]
initial
begin
	rd1_expected[2] = 1'bX;
end 
// expected rd1[ 1 ]
initial
begin
	rd1_expected[1] = 1'bX;
end 
// expected rd1[ 0 ]
initial
begin
	rd1_expected[0] = 1'bX;
end 
// expected rd2[ 31 ]
initial
begin
	rd2_expected[31] = 1'bX;
end 
// expected rd2[ 30 ]
initial
begin
	rd2_expected[30] = 1'bX;
end 
// expected rd2[ 29 ]
initial
begin
	rd2_expected[29] = 1'bX;
end 
// expected rd2[ 28 ]
initial
begin
	rd2_expected[28] = 1'bX;
end 
// expected rd2[ 27 ]
initial
begin
	rd2_expected[27] = 1'bX;
end 
// expected rd2[ 26 ]
initial
begin
	rd2_expected[26] = 1'bX;
end 
// expected rd2[ 25 ]
initial
begin
	rd2_expected[25] = 1'bX;
end 
// expected rd2[ 24 ]
initial
begin
	rd2_expected[24] = 1'bX;
end 
// expected rd2[ 23 ]
initial
begin
	rd2_expected[23] = 1'bX;
end 
// expected rd2[ 22 ]
initial
begin
	rd2_expected[22] = 1'bX;
end 
// expected rd2[ 21 ]
initial
begin
	rd2_expected[21] = 1'bX;
end 
// expected rd2[ 20 ]
initial
begin
	rd2_expected[20] = 1'bX;
end 
// expected rd2[ 19 ]
initial
begin
	rd2_expected[19] = 1'bX;
end 
// expected rd2[ 18 ]
initial
begin
	rd2_expected[18] = 1'bX;
end 
// expected rd2[ 17 ]
initial
begin
	rd2_expected[17] = 1'bX;
end 
// expected rd2[ 16 ]
initial
begin
	rd2_expected[16] = 1'bX;
end 
// expected rd2[ 15 ]
initial
begin
	rd2_expected[15] = 1'bX;
end 
// expected rd2[ 14 ]
initial
begin
	rd2_expected[14] = 1'bX;
end 
// expected rd2[ 13 ]
initial
begin
	rd2_expected[13] = 1'bX;
end 
// expected rd2[ 12 ]
initial
begin
	rd2_expected[12] = 1'bX;
end 
// expected rd2[ 11 ]
initial
begin
	rd2_expected[11] = 1'bX;
end 
// expected rd2[ 10 ]
initial
begin
	rd2_expected[10] = 1'bX;
end 
// expected rd2[ 9 ]
initial
begin
	rd2_expected[9] = 1'bX;
end 
// expected rd2[ 8 ]
initial
begin
	rd2_expected[8] = 1'bX;
end 
// expected rd2[ 7 ]
initial
begin
	rd2_expected[7] = 1'bX;
end 
// expected rd2[ 6 ]
initial
begin
	rd2_expected[6] = 1'bX;
end 
// expected rd2[ 5 ]
initial
begin
	rd2_expected[5] = 1'bX;
end 
// expected rd2[ 4 ]
initial
begin
	rd2_expected[4] = 1'bX;
end 
// expected rd2[ 3 ]
initial
begin
	rd2_expected[3] = 1'bX;
end 
// expected rd2[ 2 ]
initial
begin
	rd2_expected[2] = 1'bX;
end 
// expected rd2[ 1 ]
initial
begin
	rd2_expected[1] = 1'bX;
end 
// expected rd2[ 0 ]
initial
begin
	rd2_expected[0] = 1'bX;
end 
// expected pc[ 31 ]
initial
begin
	pc_expected[31] = 1'bX;
end 
// expected pc[ 30 ]
initial
begin
	pc_expected[30] = 1'bX;
end 
// expected pc[ 29 ]
initial
begin
	pc_expected[29] = 1'bX;
end 
// expected pc[ 28 ]
initial
begin
	pc_expected[28] = 1'bX;
end 
// expected pc[ 27 ]
initial
begin
	pc_expected[27] = 1'bX;
end 
// expected pc[ 26 ]
initial
begin
	pc_expected[26] = 1'bX;
end 
// expected pc[ 25 ]
initial
begin
	pc_expected[25] = 1'bX;
end 
// expected pc[ 24 ]
initial
begin
	pc_expected[24] = 1'bX;
end 
// expected pc[ 23 ]
initial
begin
	pc_expected[23] = 1'bX;
end 
// expected pc[ 22 ]
initial
begin
	pc_expected[22] = 1'bX;
end 
// expected pc[ 21 ]
initial
begin
	pc_expected[21] = 1'bX;
end 
// expected pc[ 20 ]
initial
begin
	pc_expected[20] = 1'bX;
end 
// expected pc[ 19 ]
initial
begin
	pc_expected[19] = 1'bX;
end 
// expected pc[ 18 ]
initial
begin
	pc_expected[18] = 1'bX;
end 
// expected pc[ 17 ]
initial
begin
	pc_expected[17] = 1'bX;
end 
// expected pc[ 16 ]
initial
begin
	pc_expected[16] = 1'bX;
end 
// expected pc[ 15 ]
initial
begin
	pc_expected[15] = 1'bX;
end 
// expected pc[ 14 ]
initial
begin
	pc_expected[14] = 1'bX;
end 
// expected pc[ 13 ]
initial
begin
	pc_expected[13] = 1'bX;
end 
// expected pc[ 12 ]
initial
begin
	pc_expected[12] = 1'bX;
end 
// expected pc[ 11 ]
initial
begin
	pc_expected[11] = 1'bX;
end 
// expected pc[ 10 ]
initial
begin
	pc_expected[10] = 1'bX;
end 
// expected pc[ 9 ]
initial
begin
	pc_expected[9] = 1'bX;
end 
// expected pc[ 8 ]
initial
begin
	pc_expected[8] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 

// expected branch
initial
begin
	branch_expected = 1'bX;
end 
// expected imAddr[ 5 ]
initial
begin
	imAddr_expected[5] = 1'bX;
end 
// expected imAddr[ 4 ]
initial
begin
	imAddr_expected[4] = 1'bX;
end 
// expected imAddr[ 3 ]
initial
begin
	imAddr_expected[3] = 1'bX;
end 
// expected imAddr[ 2 ]
initial
begin
	imAddr_expected[2] = 1'bX;
end 
// expected imAddr[ 1 ]
initial
begin
	imAddr_expected[1] = 1'bX;
end 
// expected imAddr[ 0 ]
initial
begin
	imAddr_expected[0] = 1'bX;
end 
// generate trigger
always @(aluResult_expected or aluResult or alu_op_expected or alu_op or branch_expected or branch or funct3_expected or funct3 or funct7_expected or funct7 or imAddr_expected or imAddr or instr_expected or instr or opcode_expected or opcode or pc_expected or pc or rd1_expected or rd1 or rd2_expected or rd2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluResult = %b | expected alu_op = %b | expected branch = %b | expected funct3 = %b | expected funct7 = %b | expected imAddr = %b | expected instr = %b | expected opcode = %b | expected pc = %b | expected rd1 = %b | expected rd2 = %b | ",aluResult_expected_prev,alu_op_expected_prev,branch_expected_prev,funct3_expected_prev,funct7_expected_prev,imAddr_expected_prev,instr_expected_prev,opcode_expected_prev,pc_expected_prev,rd1_expected_prev,rd2_expected_prev);
	$display("| real aluResult = %b | real alu_op = %b | real branch = %b | real funct3 = %b | real funct7 = %b | real imAddr = %b | real instr = %b | real opcode = %b | real pc = %b | real rd1 = %b | real rd2 = %b | ",aluResult_prev,alu_op_prev,branch_prev,funct3_prev,funct7_prev,imAddr_prev,instr_prev,opcode_prev,pc_prev,rd1_prev,rd2_prev);
`endif
	if (
		( aluResult_expected_prev[0] !== 1'bx ) && ( aluResult_prev[0] !== aluResult_expected_prev[0] )
		&& ((aluResult_expected_prev[0] !== last_aluResult_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[0] = aluResult_expected_prev[0];
	end
	if (
		( aluResult_expected_prev[1] !== 1'bx ) && ( aluResult_prev[1] !== aluResult_expected_prev[1] )
		&& ((aluResult_expected_prev[1] !== last_aluResult_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[1] = aluResult_expected_prev[1];
	end
	if (
		( aluResult_expected_prev[2] !== 1'bx ) && ( aluResult_prev[2] !== aluResult_expected_prev[2] )
		&& ((aluResult_expected_prev[2] !== last_aluResult_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[2] = aluResult_expected_prev[2];
	end
	if (
		( aluResult_expected_prev[3] !== 1'bx ) && ( aluResult_prev[3] !== aluResult_expected_prev[3] )
		&& ((aluResult_expected_prev[3] !== last_aluResult_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[3] = aluResult_expected_prev[3];
	end
	if (
		( aluResult_expected_prev[4] !== 1'bx ) && ( aluResult_prev[4] !== aluResult_expected_prev[4] )
		&& ((aluResult_expected_prev[4] !== last_aluResult_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[4] = aluResult_expected_prev[4];
	end
	if (
		( aluResult_expected_prev[5] !== 1'bx ) && ( aluResult_prev[5] !== aluResult_expected_prev[5] )
		&& ((aluResult_expected_prev[5] !== last_aluResult_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[5] = aluResult_expected_prev[5];
	end
	if (
		( aluResult_expected_prev[6] !== 1'bx ) && ( aluResult_prev[6] !== aluResult_expected_prev[6] )
		&& ((aluResult_expected_prev[6] !== last_aluResult_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[6] = aluResult_expected_prev[6];
	end
	if (
		( aluResult_expected_prev[7] !== 1'bx ) && ( aluResult_prev[7] !== aluResult_expected_prev[7] )
		&& ((aluResult_expected_prev[7] !== last_aluResult_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[7] = aluResult_expected_prev[7];
	end
	if (
		( aluResult_expected_prev[8] !== 1'bx ) && ( aluResult_prev[8] !== aluResult_expected_prev[8] )
		&& ((aluResult_expected_prev[8] !== last_aluResult_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[8] = aluResult_expected_prev[8];
	end
	if (
		( aluResult_expected_prev[9] !== 1'bx ) && ( aluResult_prev[9] !== aluResult_expected_prev[9] )
		&& ((aluResult_expected_prev[9] !== last_aluResult_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[9] = aluResult_expected_prev[9];
	end
	if (
		( aluResult_expected_prev[10] !== 1'bx ) && ( aluResult_prev[10] !== aluResult_expected_prev[10] )
		&& ((aluResult_expected_prev[10] !== last_aluResult_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[10] = aluResult_expected_prev[10];
	end
	if (
		( aluResult_expected_prev[11] !== 1'bx ) && ( aluResult_prev[11] !== aluResult_expected_prev[11] )
		&& ((aluResult_expected_prev[11] !== last_aluResult_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[11] = aluResult_expected_prev[11];
	end
	if (
		( aluResult_expected_prev[12] !== 1'bx ) && ( aluResult_prev[12] !== aluResult_expected_prev[12] )
		&& ((aluResult_expected_prev[12] !== last_aluResult_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[12] = aluResult_expected_prev[12];
	end
	if (
		( aluResult_expected_prev[13] !== 1'bx ) && ( aluResult_prev[13] !== aluResult_expected_prev[13] )
		&& ((aluResult_expected_prev[13] !== last_aluResult_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[13] = aluResult_expected_prev[13];
	end
	if (
		( aluResult_expected_prev[14] !== 1'bx ) && ( aluResult_prev[14] !== aluResult_expected_prev[14] )
		&& ((aluResult_expected_prev[14] !== last_aluResult_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[14] = aluResult_expected_prev[14];
	end
	if (
		( aluResult_expected_prev[15] !== 1'bx ) && ( aluResult_prev[15] !== aluResult_expected_prev[15] )
		&& ((aluResult_expected_prev[15] !== last_aluResult_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[15] = aluResult_expected_prev[15];
	end
	if (
		( aluResult_expected_prev[16] !== 1'bx ) && ( aluResult_prev[16] !== aluResult_expected_prev[16] )
		&& ((aluResult_expected_prev[16] !== last_aluResult_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[16] = aluResult_expected_prev[16];
	end
	if (
		( aluResult_expected_prev[17] !== 1'bx ) && ( aluResult_prev[17] !== aluResult_expected_prev[17] )
		&& ((aluResult_expected_prev[17] !== last_aluResult_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[17] = aluResult_expected_prev[17];
	end
	if (
		( aluResult_expected_prev[18] !== 1'bx ) && ( aluResult_prev[18] !== aluResult_expected_prev[18] )
		&& ((aluResult_expected_prev[18] !== last_aluResult_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[18] = aluResult_expected_prev[18];
	end
	if (
		( aluResult_expected_prev[19] !== 1'bx ) && ( aluResult_prev[19] !== aluResult_expected_prev[19] )
		&& ((aluResult_expected_prev[19] !== last_aluResult_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[19] = aluResult_expected_prev[19];
	end
	if (
		( aluResult_expected_prev[20] !== 1'bx ) && ( aluResult_prev[20] !== aluResult_expected_prev[20] )
		&& ((aluResult_expected_prev[20] !== last_aluResult_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[20] = aluResult_expected_prev[20];
	end
	if (
		( aluResult_expected_prev[21] !== 1'bx ) && ( aluResult_prev[21] !== aluResult_expected_prev[21] )
		&& ((aluResult_expected_prev[21] !== last_aluResult_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[21] = aluResult_expected_prev[21];
	end
	if (
		( aluResult_expected_prev[22] !== 1'bx ) && ( aluResult_prev[22] !== aluResult_expected_prev[22] )
		&& ((aluResult_expected_prev[22] !== last_aluResult_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[22] = aluResult_expected_prev[22];
	end
	if (
		( aluResult_expected_prev[23] !== 1'bx ) && ( aluResult_prev[23] !== aluResult_expected_prev[23] )
		&& ((aluResult_expected_prev[23] !== last_aluResult_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[23] = aluResult_expected_prev[23];
	end
	if (
		( aluResult_expected_prev[24] !== 1'bx ) && ( aluResult_prev[24] !== aluResult_expected_prev[24] )
		&& ((aluResult_expected_prev[24] !== last_aluResult_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[24] = aluResult_expected_prev[24];
	end
	if (
		( aluResult_expected_prev[25] !== 1'bx ) && ( aluResult_prev[25] !== aluResult_expected_prev[25] )
		&& ((aluResult_expected_prev[25] !== last_aluResult_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[25] = aluResult_expected_prev[25];
	end
	if (
		( aluResult_expected_prev[26] !== 1'bx ) && ( aluResult_prev[26] !== aluResult_expected_prev[26] )
		&& ((aluResult_expected_prev[26] !== last_aluResult_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[26] = aluResult_expected_prev[26];
	end
	if (
		( aluResult_expected_prev[27] !== 1'bx ) && ( aluResult_prev[27] !== aluResult_expected_prev[27] )
		&& ((aluResult_expected_prev[27] !== last_aluResult_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[27] = aluResult_expected_prev[27];
	end
	if (
		( aluResult_expected_prev[28] !== 1'bx ) && ( aluResult_prev[28] !== aluResult_expected_prev[28] )
		&& ((aluResult_expected_prev[28] !== last_aluResult_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[28] = aluResult_expected_prev[28];
	end
	if (
		( aluResult_expected_prev[29] !== 1'bx ) && ( aluResult_prev[29] !== aluResult_expected_prev[29] )
		&& ((aluResult_expected_prev[29] !== last_aluResult_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[29] = aluResult_expected_prev[29];
	end
	if (
		( aluResult_expected_prev[30] !== 1'bx ) && ( aluResult_prev[30] !== aluResult_expected_prev[30] )
		&& ((aluResult_expected_prev[30] !== last_aluResult_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[30] = aluResult_expected_prev[30];
	end
	if (
		( aluResult_expected_prev[31] !== 1'bx ) && ( aluResult_prev[31] !== aluResult_expected_prev[31] )
		&& ((aluResult_expected_prev[31] !== last_aluResult_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluResult[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluResult_expected_prev);
		$display ("     Real value = %b", aluResult_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluResult_exp[31] = aluResult_expected_prev[31];
	end
	if (
		( alu_op_expected_prev[0] !== 1'bx ) && ( alu_op_prev[0] !== alu_op_expected_prev[0] )
		&& ((alu_op_expected_prev[0] !== last_alu_op_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_op_expected_prev);
		$display ("     Real value = %b", alu_op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_op_exp[0] = alu_op_expected_prev[0];
	end
	if (
		( alu_op_expected_prev[1] !== 1'bx ) && ( alu_op_prev[1] !== alu_op_expected_prev[1] )
		&& ((alu_op_expected_prev[1] !== last_alu_op_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_op_expected_prev);
		$display ("     Real value = %b", alu_op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_alu_op_exp[1] = alu_op_expected_prev[1];
	end
	if (
		( branch_expected_prev !== 1'bx ) && ( branch_prev !== branch_expected_prev )
		&& ((branch_expected_prev !== last_branch_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port branch :: @time = %t",  $realtime);
		$display ("     Expected value = %b", branch_expected_prev);
		$display ("     Real value = %b", branch_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_branch_exp = branch_expected_prev;
	end
	if (
		( funct3_expected_prev[0] !== 1'bx ) && ( funct3_prev[0] !== funct3_expected_prev[0] )
		&& ((funct3_expected_prev[0] !== last_funct3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct3_expected_prev);
		$display ("     Real value = %b", funct3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_funct3_exp[0] = funct3_expected_prev[0];
	end
	if (
		( funct3_expected_prev[1] !== 1'bx ) && ( funct3_prev[1] !== funct3_expected_prev[1] )
		&& ((funct3_expected_prev[1] !== last_funct3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct3_expected_prev);
		$display ("     Real value = %b", funct3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_funct3_exp[1] = funct3_expected_prev[1];
	end
	if (
		( funct3_expected_prev[2] !== 1'bx ) && ( funct3_prev[2] !== funct3_expected_prev[2] )
		&& ((funct3_expected_prev[2] !== last_funct3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct3_expected_prev);
		$display ("     Real value = %b", funct3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_funct3_exp[2] = funct3_expected_prev[2];
	end
	if (
		( funct7_expected_prev[0] !== 1'bx ) && ( funct7_prev[0] !== funct7_expected_prev[0] )
		&& ((funct7_expected_prev[0] !== last_funct7_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[0] = funct7_expected_prev[0];
	end
	if (
		( funct7_expected_prev[1] !== 1'bx ) && ( funct7_prev[1] !== funct7_expected_prev[1] )
		&& ((funct7_expected_prev[1] !== last_funct7_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[1] = funct7_expected_prev[1];
	end
	if (
		( funct7_expected_prev[2] !== 1'bx ) && ( funct7_prev[2] !== funct7_expected_prev[2] )
		&& ((funct7_expected_prev[2] !== last_funct7_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[2] = funct7_expected_prev[2];
	end
	if (
		( funct7_expected_prev[3] !== 1'bx ) && ( funct7_prev[3] !== funct7_expected_prev[3] )
		&& ((funct7_expected_prev[3] !== last_funct7_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[3] = funct7_expected_prev[3];
	end
	if (
		( funct7_expected_prev[4] !== 1'bx ) && ( funct7_prev[4] !== funct7_expected_prev[4] )
		&& ((funct7_expected_prev[4] !== last_funct7_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[4] = funct7_expected_prev[4];
	end
	if (
		( funct7_expected_prev[5] !== 1'bx ) && ( funct7_prev[5] !== funct7_expected_prev[5] )
		&& ((funct7_expected_prev[5] !== last_funct7_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[5] = funct7_expected_prev[5];
	end
	if (
		( funct7_expected_prev[6] !== 1'bx ) && ( funct7_prev[6] !== funct7_expected_prev[6] )
		&& ((funct7_expected_prev[6] !== last_funct7_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port funct7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", funct7_expected_prev);
		$display ("     Real value = %b", funct7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_funct7_exp[6] = funct7_expected_prev[6];
	end
	if (
		( imAddr_expected_prev[0] !== 1'bx ) && ( imAddr_prev[0] !== imAddr_expected_prev[0] )
		&& ((imAddr_expected_prev[0] !== last_imAddr_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[0] = imAddr_expected_prev[0];
	end
	if (
		( imAddr_expected_prev[1] !== 1'bx ) && ( imAddr_prev[1] !== imAddr_expected_prev[1] )
		&& ((imAddr_expected_prev[1] !== last_imAddr_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[1] = imAddr_expected_prev[1];
	end
	if (
		( imAddr_expected_prev[2] !== 1'bx ) && ( imAddr_prev[2] !== imAddr_expected_prev[2] )
		&& ((imAddr_expected_prev[2] !== last_imAddr_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[2] = imAddr_expected_prev[2];
	end
	if (
		( imAddr_expected_prev[3] !== 1'bx ) && ( imAddr_prev[3] !== imAddr_expected_prev[3] )
		&& ((imAddr_expected_prev[3] !== last_imAddr_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[3] = imAddr_expected_prev[3];
	end
	if (
		( imAddr_expected_prev[4] !== 1'bx ) && ( imAddr_prev[4] !== imAddr_expected_prev[4] )
		&& ((imAddr_expected_prev[4] !== last_imAddr_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[4] = imAddr_expected_prev[4];
	end
	if (
		( imAddr_expected_prev[5] !== 1'bx ) && ( imAddr_prev[5] !== imAddr_expected_prev[5] )
		&& ((imAddr_expected_prev[5] !== last_imAddr_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imAddr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imAddr_expected_prev);
		$display ("     Real value = %b", imAddr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_imAddr_exp[5] = imAddr_expected_prev[5];
	end
	if (
		( instr_expected_prev[0] !== 1'bx ) && ( instr_prev[0] !== instr_expected_prev[0] )
		&& ((instr_expected_prev[0] !== last_instr_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[0] = instr_expected_prev[0];
	end
	if (
		( instr_expected_prev[1] !== 1'bx ) && ( instr_prev[1] !== instr_expected_prev[1] )
		&& ((instr_expected_prev[1] !== last_instr_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[1] = instr_expected_prev[1];
	end
	if (
		( instr_expected_prev[2] !== 1'bx ) && ( instr_prev[2] !== instr_expected_prev[2] )
		&& ((instr_expected_prev[2] !== last_instr_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[2] = instr_expected_prev[2];
	end
	if (
		( instr_expected_prev[3] !== 1'bx ) && ( instr_prev[3] !== instr_expected_prev[3] )
		&& ((instr_expected_prev[3] !== last_instr_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[3] = instr_expected_prev[3];
	end
	if (
		( instr_expected_prev[4] !== 1'bx ) && ( instr_prev[4] !== instr_expected_prev[4] )
		&& ((instr_expected_prev[4] !== last_instr_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[4] = instr_expected_prev[4];
	end
	if (
		( instr_expected_prev[5] !== 1'bx ) && ( instr_prev[5] !== instr_expected_prev[5] )
		&& ((instr_expected_prev[5] !== last_instr_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[5] = instr_expected_prev[5];
	end
	if (
		( instr_expected_prev[6] !== 1'bx ) && ( instr_prev[6] !== instr_expected_prev[6] )
		&& ((instr_expected_prev[6] !== last_instr_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[6] = instr_expected_prev[6];
	end
	if (
		( instr_expected_prev[7] !== 1'bx ) && ( instr_prev[7] !== instr_expected_prev[7] )
		&& ((instr_expected_prev[7] !== last_instr_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[7] = instr_expected_prev[7];
	end
	if (
		( instr_expected_prev[8] !== 1'bx ) && ( instr_prev[8] !== instr_expected_prev[8] )
		&& ((instr_expected_prev[8] !== last_instr_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[8] = instr_expected_prev[8];
	end
	if (
		( instr_expected_prev[9] !== 1'bx ) && ( instr_prev[9] !== instr_expected_prev[9] )
		&& ((instr_expected_prev[9] !== last_instr_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[9] = instr_expected_prev[9];
	end
	if (
		( instr_expected_prev[10] !== 1'bx ) && ( instr_prev[10] !== instr_expected_prev[10] )
		&& ((instr_expected_prev[10] !== last_instr_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[10] = instr_expected_prev[10];
	end
	if (
		( instr_expected_prev[11] !== 1'bx ) && ( instr_prev[11] !== instr_expected_prev[11] )
		&& ((instr_expected_prev[11] !== last_instr_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[11] = instr_expected_prev[11];
	end
	if (
		( instr_expected_prev[12] !== 1'bx ) && ( instr_prev[12] !== instr_expected_prev[12] )
		&& ((instr_expected_prev[12] !== last_instr_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[12] = instr_expected_prev[12];
	end
	if (
		( instr_expected_prev[13] !== 1'bx ) && ( instr_prev[13] !== instr_expected_prev[13] )
		&& ((instr_expected_prev[13] !== last_instr_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[13] = instr_expected_prev[13];
	end
	if (
		( instr_expected_prev[14] !== 1'bx ) && ( instr_prev[14] !== instr_expected_prev[14] )
		&& ((instr_expected_prev[14] !== last_instr_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[14] = instr_expected_prev[14];
	end
	if (
		( instr_expected_prev[15] !== 1'bx ) && ( instr_prev[15] !== instr_expected_prev[15] )
		&& ((instr_expected_prev[15] !== last_instr_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[15] = instr_expected_prev[15];
	end
	if (
		( instr_expected_prev[16] !== 1'bx ) && ( instr_prev[16] !== instr_expected_prev[16] )
		&& ((instr_expected_prev[16] !== last_instr_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[16] = instr_expected_prev[16];
	end
	if (
		( instr_expected_prev[17] !== 1'bx ) && ( instr_prev[17] !== instr_expected_prev[17] )
		&& ((instr_expected_prev[17] !== last_instr_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[17] = instr_expected_prev[17];
	end
	if (
		( instr_expected_prev[18] !== 1'bx ) && ( instr_prev[18] !== instr_expected_prev[18] )
		&& ((instr_expected_prev[18] !== last_instr_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[18] = instr_expected_prev[18];
	end
	if (
		( instr_expected_prev[19] !== 1'bx ) && ( instr_prev[19] !== instr_expected_prev[19] )
		&& ((instr_expected_prev[19] !== last_instr_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[19] = instr_expected_prev[19];
	end
	if (
		( instr_expected_prev[20] !== 1'bx ) && ( instr_prev[20] !== instr_expected_prev[20] )
		&& ((instr_expected_prev[20] !== last_instr_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[20] = instr_expected_prev[20];
	end
	if (
		( instr_expected_prev[21] !== 1'bx ) && ( instr_prev[21] !== instr_expected_prev[21] )
		&& ((instr_expected_prev[21] !== last_instr_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[21] = instr_expected_prev[21];
	end
	if (
		( instr_expected_prev[22] !== 1'bx ) && ( instr_prev[22] !== instr_expected_prev[22] )
		&& ((instr_expected_prev[22] !== last_instr_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[22] = instr_expected_prev[22];
	end
	if (
		( instr_expected_prev[23] !== 1'bx ) && ( instr_prev[23] !== instr_expected_prev[23] )
		&& ((instr_expected_prev[23] !== last_instr_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[23] = instr_expected_prev[23];
	end
	if (
		( instr_expected_prev[24] !== 1'bx ) && ( instr_prev[24] !== instr_expected_prev[24] )
		&& ((instr_expected_prev[24] !== last_instr_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[24] = instr_expected_prev[24];
	end
	if (
		( instr_expected_prev[25] !== 1'bx ) && ( instr_prev[25] !== instr_expected_prev[25] )
		&& ((instr_expected_prev[25] !== last_instr_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[25] = instr_expected_prev[25];
	end
	if (
		( instr_expected_prev[26] !== 1'bx ) && ( instr_prev[26] !== instr_expected_prev[26] )
		&& ((instr_expected_prev[26] !== last_instr_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[26] = instr_expected_prev[26];
	end
	if (
		( instr_expected_prev[27] !== 1'bx ) && ( instr_prev[27] !== instr_expected_prev[27] )
		&& ((instr_expected_prev[27] !== last_instr_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[27] = instr_expected_prev[27];
	end
	if (
		( instr_expected_prev[28] !== 1'bx ) && ( instr_prev[28] !== instr_expected_prev[28] )
		&& ((instr_expected_prev[28] !== last_instr_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[28] = instr_expected_prev[28];
	end
	if (
		( instr_expected_prev[29] !== 1'bx ) && ( instr_prev[29] !== instr_expected_prev[29] )
		&& ((instr_expected_prev[29] !== last_instr_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[29] = instr_expected_prev[29];
	end
	if (
		( instr_expected_prev[30] !== 1'bx ) && ( instr_prev[30] !== instr_expected_prev[30] )
		&& ((instr_expected_prev[30] !== last_instr_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[30] = instr_expected_prev[30];
	end
	if (
		( instr_expected_prev[31] !== 1'bx ) && ( instr_prev[31] !== instr_expected_prev[31] )
		&& ((instr_expected_prev[31] !== last_instr_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instr_expected_prev);
		$display ("     Real value = %b", instr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_instr_exp[31] = instr_expected_prev[31];
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( pc_expected_prev[8] !== 1'bx ) && ( pc_prev[8] !== pc_expected_prev[8] )
		&& ((pc_expected_prev[8] !== last_pc_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[8] = pc_expected_prev[8];
	end
	if (
		( pc_expected_prev[9] !== 1'bx ) && ( pc_prev[9] !== pc_expected_prev[9] )
		&& ((pc_expected_prev[9] !== last_pc_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[9] = pc_expected_prev[9];
	end
	if (
		( pc_expected_prev[10] !== 1'bx ) && ( pc_prev[10] !== pc_expected_prev[10] )
		&& ((pc_expected_prev[10] !== last_pc_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[10] = pc_expected_prev[10];
	end
	if (
		( pc_expected_prev[11] !== 1'bx ) && ( pc_prev[11] !== pc_expected_prev[11] )
		&& ((pc_expected_prev[11] !== last_pc_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[11] = pc_expected_prev[11];
	end
	if (
		( pc_expected_prev[12] !== 1'bx ) && ( pc_prev[12] !== pc_expected_prev[12] )
		&& ((pc_expected_prev[12] !== last_pc_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[12] = pc_expected_prev[12];
	end
	if (
		( pc_expected_prev[13] !== 1'bx ) && ( pc_prev[13] !== pc_expected_prev[13] )
		&& ((pc_expected_prev[13] !== last_pc_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[13] = pc_expected_prev[13];
	end
	if (
		( pc_expected_prev[14] !== 1'bx ) && ( pc_prev[14] !== pc_expected_prev[14] )
		&& ((pc_expected_prev[14] !== last_pc_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[14] = pc_expected_prev[14];
	end
	if (
		( pc_expected_prev[15] !== 1'bx ) && ( pc_prev[15] !== pc_expected_prev[15] )
		&& ((pc_expected_prev[15] !== last_pc_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[15] = pc_expected_prev[15];
	end
	if (
		( pc_expected_prev[16] !== 1'bx ) && ( pc_prev[16] !== pc_expected_prev[16] )
		&& ((pc_expected_prev[16] !== last_pc_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[16] = pc_expected_prev[16];
	end
	if (
		( pc_expected_prev[17] !== 1'bx ) && ( pc_prev[17] !== pc_expected_prev[17] )
		&& ((pc_expected_prev[17] !== last_pc_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[17] = pc_expected_prev[17];
	end
	if (
		( pc_expected_prev[18] !== 1'bx ) && ( pc_prev[18] !== pc_expected_prev[18] )
		&& ((pc_expected_prev[18] !== last_pc_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[18] = pc_expected_prev[18];
	end
	if (
		( pc_expected_prev[19] !== 1'bx ) && ( pc_prev[19] !== pc_expected_prev[19] )
		&& ((pc_expected_prev[19] !== last_pc_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[19] = pc_expected_prev[19];
	end
	if (
		( pc_expected_prev[20] !== 1'bx ) && ( pc_prev[20] !== pc_expected_prev[20] )
		&& ((pc_expected_prev[20] !== last_pc_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[20] = pc_expected_prev[20];
	end
	if (
		( pc_expected_prev[21] !== 1'bx ) && ( pc_prev[21] !== pc_expected_prev[21] )
		&& ((pc_expected_prev[21] !== last_pc_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[21] = pc_expected_prev[21];
	end
	if (
		( pc_expected_prev[22] !== 1'bx ) && ( pc_prev[22] !== pc_expected_prev[22] )
		&& ((pc_expected_prev[22] !== last_pc_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[22] = pc_expected_prev[22];
	end
	if (
		( pc_expected_prev[23] !== 1'bx ) && ( pc_prev[23] !== pc_expected_prev[23] )
		&& ((pc_expected_prev[23] !== last_pc_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[23] = pc_expected_prev[23];
	end
	if (
		( pc_expected_prev[24] !== 1'bx ) && ( pc_prev[24] !== pc_expected_prev[24] )
		&& ((pc_expected_prev[24] !== last_pc_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[24] = pc_expected_prev[24];
	end
	if (
		( pc_expected_prev[25] !== 1'bx ) && ( pc_prev[25] !== pc_expected_prev[25] )
		&& ((pc_expected_prev[25] !== last_pc_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[25] = pc_expected_prev[25];
	end
	if (
		( pc_expected_prev[26] !== 1'bx ) && ( pc_prev[26] !== pc_expected_prev[26] )
		&& ((pc_expected_prev[26] !== last_pc_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[26] = pc_expected_prev[26];
	end
	if (
		( pc_expected_prev[27] !== 1'bx ) && ( pc_prev[27] !== pc_expected_prev[27] )
		&& ((pc_expected_prev[27] !== last_pc_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[27] = pc_expected_prev[27];
	end
	if (
		( pc_expected_prev[28] !== 1'bx ) && ( pc_prev[28] !== pc_expected_prev[28] )
		&& ((pc_expected_prev[28] !== last_pc_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[28] = pc_expected_prev[28];
	end
	if (
		( pc_expected_prev[29] !== 1'bx ) && ( pc_prev[29] !== pc_expected_prev[29] )
		&& ((pc_expected_prev[29] !== last_pc_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[29] = pc_expected_prev[29];
	end
	if (
		( pc_expected_prev[30] !== 1'bx ) && ( pc_prev[30] !== pc_expected_prev[30] )
		&& ((pc_expected_prev[30] !== last_pc_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[30] = pc_expected_prev[30];
	end
	if (
		( pc_expected_prev[31] !== 1'bx ) && ( pc_prev[31] !== pc_expected_prev[31] )
		&& ((pc_expected_prev[31] !== last_pc_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_pc_exp[31] = pc_expected_prev[31];
	end
	if (
		( rd1_expected_prev[0] !== 1'bx ) && ( rd1_prev[0] !== rd1_expected_prev[0] )
		&& ((rd1_expected_prev[0] !== last_rd1_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[0] = rd1_expected_prev[0];
	end
	if (
		( rd1_expected_prev[1] !== 1'bx ) && ( rd1_prev[1] !== rd1_expected_prev[1] )
		&& ((rd1_expected_prev[1] !== last_rd1_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[1] = rd1_expected_prev[1];
	end
	if (
		( rd1_expected_prev[2] !== 1'bx ) && ( rd1_prev[2] !== rd1_expected_prev[2] )
		&& ((rd1_expected_prev[2] !== last_rd1_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[2] = rd1_expected_prev[2];
	end
	if (
		( rd1_expected_prev[3] !== 1'bx ) && ( rd1_prev[3] !== rd1_expected_prev[3] )
		&& ((rd1_expected_prev[3] !== last_rd1_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[3] = rd1_expected_prev[3];
	end
	if (
		( rd1_expected_prev[4] !== 1'bx ) && ( rd1_prev[4] !== rd1_expected_prev[4] )
		&& ((rd1_expected_prev[4] !== last_rd1_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[4] = rd1_expected_prev[4];
	end
	if (
		( rd1_expected_prev[5] !== 1'bx ) && ( rd1_prev[5] !== rd1_expected_prev[5] )
		&& ((rd1_expected_prev[5] !== last_rd1_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[5] = rd1_expected_prev[5];
	end
	if (
		( rd1_expected_prev[6] !== 1'bx ) && ( rd1_prev[6] !== rd1_expected_prev[6] )
		&& ((rd1_expected_prev[6] !== last_rd1_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[6] = rd1_expected_prev[6];
	end
	if (
		( rd1_expected_prev[7] !== 1'bx ) && ( rd1_prev[7] !== rd1_expected_prev[7] )
		&& ((rd1_expected_prev[7] !== last_rd1_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[7] = rd1_expected_prev[7];
	end
	if (
		( rd1_expected_prev[8] !== 1'bx ) && ( rd1_prev[8] !== rd1_expected_prev[8] )
		&& ((rd1_expected_prev[8] !== last_rd1_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[8] = rd1_expected_prev[8];
	end
	if (
		( rd1_expected_prev[9] !== 1'bx ) && ( rd1_prev[9] !== rd1_expected_prev[9] )
		&& ((rd1_expected_prev[9] !== last_rd1_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[9] = rd1_expected_prev[9];
	end
	if (
		( rd1_expected_prev[10] !== 1'bx ) && ( rd1_prev[10] !== rd1_expected_prev[10] )
		&& ((rd1_expected_prev[10] !== last_rd1_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[10] = rd1_expected_prev[10];
	end
	if (
		( rd1_expected_prev[11] !== 1'bx ) && ( rd1_prev[11] !== rd1_expected_prev[11] )
		&& ((rd1_expected_prev[11] !== last_rd1_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[11] = rd1_expected_prev[11];
	end
	if (
		( rd1_expected_prev[12] !== 1'bx ) && ( rd1_prev[12] !== rd1_expected_prev[12] )
		&& ((rd1_expected_prev[12] !== last_rd1_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[12] = rd1_expected_prev[12];
	end
	if (
		( rd1_expected_prev[13] !== 1'bx ) && ( rd1_prev[13] !== rd1_expected_prev[13] )
		&& ((rd1_expected_prev[13] !== last_rd1_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[13] = rd1_expected_prev[13];
	end
	if (
		( rd1_expected_prev[14] !== 1'bx ) && ( rd1_prev[14] !== rd1_expected_prev[14] )
		&& ((rd1_expected_prev[14] !== last_rd1_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[14] = rd1_expected_prev[14];
	end
	if (
		( rd1_expected_prev[15] !== 1'bx ) && ( rd1_prev[15] !== rd1_expected_prev[15] )
		&& ((rd1_expected_prev[15] !== last_rd1_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[15] = rd1_expected_prev[15];
	end
	if (
		( rd1_expected_prev[16] !== 1'bx ) && ( rd1_prev[16] !== rd1_expected_prev[16] )
		&& ((rd1_expected_prev[16] !== last_rd1_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[16] = rd1_expected_prev[16];
	end
	if (
		( rd1_expected_prev[17] !== 1'bx ) && ( rd1_prev[17] !== rd1_expected_prev[17] )
		&& ((rd1_expected_prev[17] !== last_rd1_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[17] = rd1_expected_prev[17];
	end
	if (
		( rd1_expected_prev[18] !== 1'bx ) && ( rd1_prev[18] !== rd1_expected_prev[18] )
		&& ((rd1_expected_prev[18] !== last_rd1_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[18] = rd1_expected_prev[18];
	end
	if (
		( rd1_expected_prev[19] !== 1'bx ) && ( rd1_prev[19] !== rd1_expected_prev[19] )
		&& ((rd1_expected_prev[19] !== last_rd1_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[19] = rd1_expected_prev[19];
	end
	if (
		( rd1_expected_prev[20] !== 1'bx ) && ( rd1_prev[20] !== rd1_expected_prev[20] )
		&& ((rd1_expected_prev[20] !== last_rd1_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[20] = rd1_expected_prev[20];
	end
	if (
		( rd1_expected_prev[21] !== 1'bx ) && ( rd1_prev[21] !== rd1_expected_prev[21] )
		&& ((rd1_expected_prev[21] !== last_rd1_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[21] = rd1_expected_prev[21];
	end
	if (
		( rd1_expected_prev[22] !== 1'bx ) && ( rd1_prev[22] !== rd1_expected_prev[22] )
		&& ((rd1_expected_prev[22] !== last_rd1_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[22] = rd1_expected_prev[22];
	end
	if (
		( rd1_expected_prev[23] !== 1'bx ) && ( rd1_prev[23] !== rd1_expected_prev[23] )
		&& ((rd1_expected_prev[23] !== last_rd1_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[23] = rd1_expected_prev[23];
	end
	if (
		( rd1_expected_prev[24] !== 1'bx ) && ( rd1_prev[24] !== rd1_expected_prev[24] )
		&& ((rd1_expected_prev[24] !== last_rd1_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[24] = rd1_expected_prev[24];
	end
	if (
		( rd1_expected_prev[25] !== 1'bx ) && ( rd1_prev[25] !== rd1_expected_prev[25] )
		&& ((rd1_expected_prev[25] !== last_rd1_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[25] = rd1_expected_prev[25];
	end
	if (
		( rd1_expected_prev[26] !== 1'bx ) && ( rd1_prev[26] !== rd1_expected_prev[26] )
		&& ((rd1_expected_prev[26] !== last_rd1_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[26] = rd1_expected_prev[26];
	end
	if (
		( rd1_expected_prev[27] !== 1'bx ) && ( rd1_prev[27] !== rd1_expected_prev[27] )
		&& ((rd1_expected_prev[27] !== last_rd1_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[27] = rd1_expected_prev[27];
	end
	if (
		( rd1_expected_prev[28] !== 1'bx ) && ( rd1_prev[28] !== rd1_expected_prev[28] )
		&& ((rd1_expected_prev[28] !== last_rd1_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[28] = rd1_expected_prev[28];
	end
	if (
		( rd1_expected_prev[29] !== 1'bx ) && ( rd1_prev[29] !== rd1_expected_prev[29] )
		&& ((rd1_expected_prev[29] !== last_rd1_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[29] = rd1_expected_prev[29];
	end
	if (
		( rd1_expected_prev[30] !== 1'bx ) && ( rd1_prev[30] !== rd1_expected_prev[30] )
		&& ((rd1_expected_prev[30] !== last_rd1_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[30] = rd1_expected_prev[30];
	end
	if (
		( rd1_expected_prev[31] !== 1'bx ) && ( rd1_prev[31] !== rd1_expected_prev[31] )
		&& ((rd1_expected_prev[31] !== last_rd1_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd1_expected_prev);
		$display ("     Real value = %b", rd1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_rd1_exp[31] = rd1_expected_prev[31];
	end
	if (
		( rd2_expected_prev[0] !== 1'bx ) && ( rd2_prev[0] !== rd2_expected_prev[0] )
		&& ((rd2_expected_prev[0] !== last_rd2_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[0] = rd2_expected_prev[0];
	end
	if (
		( rd2_expected_prev[1] !== 1'bx ) && ( rd2_prev[1] !== rd2_expected_prev[1] )
		&& ((rd2_expected_prev[1] !== last_rd2_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[1] = rd2_expected_prev[1];
	end
	if (
		( rd2_expected_prev[2] !== 1'bx ) && ( rd2_prev[2] !== rd2_expected_prev[2] )
		&& ((rd2_expected_prev[2] !== last_rd2_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[2] = rd2_expected_prev[2];
	end
	if (
		( rd2_expected_prev[3] !== 1'bx ) && ( rd2_prev[3] !== rd2_expected_prev[3] )
		&& ((rd2_expected_prev[3] !== last_rd2_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[3] = rd2_expected_prev[3];
	end
	if (
		( rd2_expected_prev[4] !== 1'bx ) && ( rd2_prev[4] !== rd2_expected_prev[4] )
		&& ((rd2_expected_prev[4] !== last_rd2_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[4] = rd2_expected_prev[4];
	end
	if (
		( rd2_expected_prev[5] !== 1'bx ) && ( rd2_prev[5] !== rd2_expected_prev[5] )
		&& ((rd2_expected_prev[5] !== last_rd2_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[5] = rd2_expected_prev[5];
	end
	if (
		( rd2_expected_prev[6] !== 1'bx ) && ( rd2_prev[6] !== rd2_expected_prev[6] )
		&& ((rd2_expected_prev[6] !== last_rd2_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[6] = rd2_expected_prev[6];
	end
	if (
		( rd2_expected_prev[7] !== 1'bx ) && ( rd2_prev[7] !== rd2_expected_prev[7] )
		&& ((rd2_expected_prev[7] !== last_rd2_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[7] = rd2_expected_prev[7];
	end
	if (
		( rd2_expected_prev[8] !== 1'bx ) && ( rd2_prev[8] !== rd2_expected_prev[8] )
		&& ((rd2_expected_prev[8] !== last_rd2_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[8] = rd2_expected_prev[8];
	end
	if (
		( rd2_expected_prev[9] !== 1'bx ) && ( rd2_prev[9] !== rd2_expected_prev[9] )
		&& ((rd2_expected_prev[9] !== last_rd2_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[9] = rd2_expected_prev[9];
	end
	if (
		( rd2_expected_prev[10] !== 1'bx ) && ( rd2_prev[10] !== rd2_expected_prev[10] )
		&& ((rd2_expected_prev[10] !== last_rd2_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[10] = rd2_expected_prev[10];
	end
	if (
		( rd2_expected_prev[11] !== 1'bx ) && ( rd2_prev[11] !== rd2_expected_prev[11] )
		&& ((rd2_expected_prev[11] !== last_rd2_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[11] = rd2_expected_prev[11];
	end
	if (
		( rd2_expected_prev[12] !== 1'bx ) && ( rd2_prev[12] !== rd2_expected_prev[12] )
		&& ((rd2_expected_prev[12] !== last_rd2_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[12] = rd2_expected_prev[12];
	end
	if (
		( rd2_expected_prev[13] !== 1'bx ) && ( rd2_prev[13] !== rd2_expected_prev[13] )
		&& ((rd2_expected_prev[13] !== last_rd2_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[13] = rd2_expected_prev[13];
	end
	if (
		( rd2_expected_prev[14] !== 1'bx ) && ( rd2_prev[14] !== rd2_expected_prev[14] )
		&& ((rd2_expected_prev[14] !== last_rd2_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[14] = rd2_expected_prev[14];
	end
	if (
		( rd2_expected_prev[15] !== 1'bx ) && ( rd2_prev[15] !== rd2_expected_prev[15] )
		&& ((rd2_expected_prev[15] !== last_rd2_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[15] = rd2_expected_prev[15];
	end
	if (
		( rd2_expected_prev[16] !== 1'bx ) && ( rd2_prev[16] !== rd2_expected_prev[16] )
		&& ((rd2_expected_prev[16] !== last_rd2_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[16] = rd2_expected_prev[16];
	end
	if (
		( rd2_expected_prev[17] !== 1'bx ) && ( rd2_prev[17] !== rd2_expected_prev[17] )
		&& ((rd2_expected_prev[17] !== last_rd2_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[17] = rd2_expected_prev[17];
	end
	if (
		( rd2_expected_prev[18] !== 1'bx ) && ( rd2_prev[18] !== rd2_expected_prev[18] )
		&& ((rd2_expected_prev[18] !== last_rd2_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[18] = rd2_expected_prev[18];
	end
	if (
		( rd2_expected_prev[19] !== 1'bx ) && ( rd2_prev[19] !== rd2_expected_prev[19] )
		&& ((rd2_expected_prev[19] !== last_rd2_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[19] = rd2_expected_prev[19];
	end
	if (
		( rd2_expected_prev[20] !== 1'bx ) && ( rd2_prev[20] !== rd2_expected_prev[20] )
		&& ((rd2_expected_prev[20] !== last_rd2_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[20] = rd2_expected_prev[20];
	end
	if (
		( rd2_expected_prev[21] !== 1'bx ) && ( rd2_prev[21] !== rd2_expected_prev[21] )
		&& ((rd2_expected_prev[21] !== last_rd2_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[21] = rd2_expected_prev[21];
	end
	if (
		( rd2_expected_prev[22] !== 1'bx ) && ( rd2_prev[22] !== rd2_expected_prev[22] )
		&& ((rd2_expected_prev[22] !== last_rd2_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[22] = rd2_expected_prev[22];
	end
	if (
		( rd2_expected_prev[23] !== 1'bx ) && ( rd2_prev[23] !== rd2_expected_prev[23] )
		&& ((rd2_expected_prev[23] !== last_rd2_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[23] = rd2_expected_prev[23];
	end
	if (
		( rd2_expected_prev[24] !== 1'bx ) && ( rd2_prev[24] !== rd2_expected_prev[24] )
		&& ((rd2_expected_prev[24] !== last_rd2_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[24] = rd2_expected_prev[24];
	end
	if (
		( rd2_expected_prev[25] !== 1'bx ) && ( rd2_prev[25] !== rd2_expected_prev[25] )
		&& ((rd2_expected_prev[25] !== last_rd2_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[25] = rd2_expected_prev[25];
	end
	if (
		( rd2_expected_prev[26] !== 1'bx ) && ( rd2_prev[26] !== rd2_expected_prev[26] )
		&& ((rd2_expected_prev[26] !== last_rd2_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[26] = rd2_expected_prev[26];
	end
	if (
		( rd2_expected_prev[27] !== 1'bx ) && ( rd2_prev[27] !== rd2_expected_prev[27] )
		&& ((rd2_expected_prev[27] !== last_rd2_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[27] = rd2_expected_prev[27];
	end
	if (
		( rd2_expected_prev[28] !== 1'bx ) && ( rd2_prev[28] !== rd2_expected_prev[28] )
		&& ((rd2_expected_prev[28] !== last_rd2_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[28] = rd2_expected_prev[28];
	end
	if (
		( rd2_expected_prev[29] !== 1'bx ) && ( rd2_prev[29] !== rd2_expected_prev[29] )
		&& ((rd2_expected_prev[29] !== last_rd2_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[29] = rd2_expected_prev[29];
	end
	if (
		( rd2_expected_prev[30] !== 1'bx ) && ( rd2_prev[30] !== rd2_expected_prev[30] )
		&& ((rd2_expected_prev[30] !== last_rd2_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[30] = rd2_expected_prev[30];
	end
	if (
		( rd2_expected_prev[31] !== 1'bx ) && ( rd2_prev[31] !== rd2_expected_prev[31] )
		&& ((rd2_expected_prev[31] !== last_rd2_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rd2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rd2_expected_prev);
		$display ("     Real value = %b", rd2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_rd2_exp[31] = rd2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module datapath_debug_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_n;
// wires                                               
wire [31:0] aluResult;
wire [1:0] alu_op;
wire branch;
wire [2:0] funct3;
wire [6:0] funct7;
wire [5:0] imAddr;
wire [31:0] instr;
wire [6:0] opcode;
wire [31:0] pc;
wire [31:0] rd1;
wire [31:0] rd2;

wire sampler;                             

// assign statements (if any)                          
datapath_debug i1 (
// port map - connection between master ports and signals/registers   
	.aluResult(aluResult),
	.alu_op(alu_op),
	.branch(branch),
	.clk(clk),
	.funct3(funct3),
	.funct7(funct7),
	.imAddr(imAddr),
	.instr(instr),
	.opcode(opcode),
	.pc(pc),
	.rd1(rd1),
	.rd2(rd2),
	.rst_n(rst_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 

datapath_debug_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_n(rst_n),
	.sampler_tx(sampler)
);

datapath_debug_vlg_check_tst tb_out(
	.aluResult(aluResult),
	.alu_op(alu_op),
	.branch(branch),
	.funct3(funct3),
	.funct7(funct7),
	.imAddr(imAddr),
	.instr(instr),
	.opcode(opcode),
	.pc(pc),
	.rd1(rd1),
	.rd2(rd2),
	.sampler_rx(sampler)
);
endmodule

